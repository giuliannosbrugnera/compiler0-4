==================================================================
    
    Universidade Federal de Sao Carlos - UFSCar, Sorocaba

    Disciplina: Compiladores
    Prof. Tiemi Christine Sakata

    Relatório - Compilador 0-4

    Autor: Giulianno Raphael Sbrugnera RA: 408093
    Autor: Matheus Casarin Paez        RA: 438308
 
==================================================================



==============================
======== Visão Geral =========
==============================
Nesta fase 04 há a implementação do compilador completo. Suas funcionalidades são:
- análise léxica;
- análise sintática;
- análise semântica;
- geração de código em linguagem C;
- emissão de mensagens de erro.

Juntamente com os arquivos fontes do projeto, incorporamos cinco arquivos de teste, cada um com determinadas características:
- o primeiro e o segundo arquivo mostram a geração de código em linguagem C de uma linguagem correta;
- o terceiro arquivo deixa claro que o compilador consegue ignorar espaços em branco e quebra-linhas.
	- emite erro de domínio semântico, pois falta um parênteses de abertura na entrada.
- o quarto arquivo mostra que tão logo um erro é achado, o compilador emite-o pelo terminal.
	- emite erro de domínio sintático, pois deveria haver uma variável ou um número dentro de uma atribuição;
- o quinto arquivo emite erro de domínio léxico, pois a palavra reservada 'write' está escrita errôneamente.
	- é importante notar aqui que, de acordo com a nossa definição da linguagem, uma variável possui somente uma letra, de 'a' a 'z'.
	  Logo, há a necessidade de emissão do erro, pois não poderia ser uma variável.

Pensando em ter uma melhor organização dos arquivos e do código em si, dois novos pacotes foram criados: lexer, juntamente da classe Lexer, e
o pacote resources, onde estão localizados os arquivos de teste.
Os métodos referentes à análise léxica, como nextToken, assim como os atributos, foram passados para a classe Lexer.

A classe BaseClass, que servia como uma classe base, foi removida, pois sua utilização não fazia tanto sentido.

Não especificamos com parênteses a precedência das operações, mas o nosso compilador segue a precedência estipulada, ou seja, o operador '*'
possui uma maior precedência em relação ao operador '+'.



==============================
=== Definição da Gramática ===
==============================
Segue abaixo a gramática utilizada como base para a implementação do nosso compilador.

Uma gramática G é especificada através de uma quádrupla (V, T, P, S) onde
V é conjunto de símbolos não-terminais
T é conjunto de símbolos terminais
P é o conjunto de produções
S é o símbolo não-terminal inicial da gramática

Dessa forma, podemos definir nossa gramática G da maneira descrita abaixo.
Espaços em branco são apenas para uma melhor visualização, e devem ser desconsiderados.
A palavra 'vazio' representa a letra grega épsilon, a qual representa o vazio por si.

G = (V, T, P, S)

V = {Program, Line, Write, Atrib, expr, ei, t, ti, f, digit, number, var, vazio}
T = {';', '(', ')', '=', '+', '*', '0', ..., '9', 'a', ..., 'z'}
P = {
		Program ::= {Line}
	    Line    ::= (Write | Atrib) ';'
	    Write   ::= 'Write' '(' expr ')'
	    Atrib   ::= var '=' expr
	    expr    ::= t ei
	    ei      ::= '+' t ei | vazio
	    t       ::= f ti
	    ti      ::= '*' f ti | vazio
	    f       ::= number | var
	    number  ::= digit {[digit]}
	    digit   ::= '0' | ... | '9'
	    var     ::= 'a' | ... | 'z'
	}
S = Program

A seguir descreveremos o que cada símbolo representa.
- Program representa todo o conjunto de instruções.
- Line representa uma linha do conjunto de instruções (por exemplo, 'write(10);').
- Write representa o comando 'write'.
- Atrib representa uma atribuição.
- expr representa uma expressão.
- oper representa um operando.
- digit representa um dígito de um número.
- number representa um número.
- var representa uma variável.



==============================
======== Dificuldades ========
==============================
A nossa maior dificuldade foi realmente montar a AST. Não sabíamos se o correto era continuar com a mesma gramática utilizada anteriormente
ou se havia a necessidade da criação de uma nova. Por fim, decidimos continuar com a mesma, o que resultou na completude do trabalho.
Da mesma maneira, demoramos a perceber que uma classe base geral era necessária. Assim, isso facilitaria com que todas as sub classes
possuíssem o mesmo método gerador de código em linguagem C.